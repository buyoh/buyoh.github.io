<div class="block">
<h4 class="shadow">解説</h4>
<div>
<!--
\( 1+1\)
	div タグでも preタグでもお好きにどうぞ もちろんMathJaxが使えます。
-->
<p>
    頂点の価格が $2^i$ であることから、次が言えます。
</p>
<ol>
    <li>
        出力すべき2進数の下から $i$ 番目のビットは、$i-1$ 番目の頂点を購入するかどうかで決まる。<br>
        0,1,3番目の頂点を購入すると、価格は1011になる。
    </li>
    <li>
        $最も高価な頂点のコスト \gt 最も高価な頂点を除く全ての頂点のコストの総和$<br>
    </li>
</ol>
<br>
<p>
    2.から、
</p>
<p>
    '最も高価な頂点'以外をすべて購入したとき、全ての辺を手に入れることができなければ、'最も高価な頂点'は必要。<br>
    '最も高価な頂点'以外をすべて購入したとき、全ての辺を手に入れることができれば、'最も高価な頂点'は不要
</p>
<p>
    ということが分かります。
</p>
<p>
    頂点が必要と判定したならば、頂点とその頂点に接続する辺をグラフから削除します。<br>
    逆に不要と判定したならば、頂点のみをグラフから削除します（辺の先に頂点が無いという不自然なグラフになる）
</p>
<p>
    新しいグラフを作成したら、また初めに戻り、'最も高価な頂点'について調べます。<br>
    これを頂点が無くなるまで繰り返すことで、$O(N(N+M))$ で求めることができます。
</p>
<p>
    <a href="https://buyoh.github.io/f/yukicoder/1357/algorithm1.png">
        <img src="https://buyoh.github.io/f/yukicoder/1357/algorithm1.png" width="640" height="557">
    </a><br><br>
</p>
<p>
    残念ながら、$N,M \le 10^5$ なので、上で示したアルゴリズムの計算量ではTLEになってしまいます。<br>
    すべての辺が手に入るかどうかを確認するために毎回 $O(N+M)$ の計算を行っていることが無駄のように見えます。
</p>
<p>
    『頂点を全て選べば、辺は全て選択される』、『選ばない頂点は最も高価な頂点1つだけ』なので、<br>
    確認するべき辺は、'最も高価な頂点'に接続する辺のみです。
</p>
<p>
    つまり、選ばない頂点に接続する辺のうちどれか１つでも一方が削除済みならば、その選ばなかった頂点は必要、と判断します。
</p>
<p>
    <a href="https://buyoh.github.io/f/yukicoder/1357/algorithm2.png">
        <img src="https://buyoh.github.io/f/yukicoder/1357/algorithm2.png" width="640" height="557">
    </a><br><br>
</p>
<p>
    判定対象の頂点を $v$ とすると $O(\rm deg(v))$ で判断できるので、全体の計算量は $O(N+M)$ です。
</p>
<br><br><br>
<p>解答例のリンクを示します。</p>
<ul>
    <li>計算量$O(2^N)$ <a href="http://yukicoder.me/submissions/122933">解答例</a></li>
    <li>計算量$O(N(N+M))$ <a href="http://yukicoder.me/submissions/122932">解答例</a></li>
    <li>計算量$O(N+M)$ <a href="http://yukicoder.me/submissions/145668">解答例1</a></li>
</ul>
<br>
<div><a href="http://yukicoder.me/submissions/122984">テストケース確認用assertプログラム</a></div>

<p>23:45 画像内の文章を修正しました</p>
</div>
</div>
